/ app/views/patent_applications/show.html.slim
/
/ This view displays a saved patent application with:
/ - Problem and solution display
/ - AI chat interface for continued refinement
/ - Edit button to modify the application
/
/ Uses Turbo Frames for dynamic updates and Stimulus for interactivity

.patent-application-container
  .d-flex.justify-content-between.align-items-center.mb-4
    div
      - if @patent_application.title.present?
        h1 = @patent_application.title
      - else
        h1.text-muted
          | Untitled Patent Application
          small.ms-2
            = link_to edit_patent_application_path(@patent_application), class: "text-primary text-decoration-none" do
              i.bi.bi-pencil-square.small
              span.ms-1.small Set title
      p.text-muted.small Patent Application ##{@patent_application.id}
    = link_to "Edit", edit_patent_application_path(@patent_application), class: "btn btn-outline-primary"
  
  .row
    .col-md-7
      / Patent application details in a Turbo Frame
      = turbo_frame_tag dom_id(@patent_application) do
        .card.mb-4
          .card-header
            h2 Technical Problem
          .card-body
            p.problem-text = @patent_application.problem
        
        .card.mb-4
          .card-header
            h2 Proposed Solution
          .card-body
            p.solution-text = @patent_application.solution
        
        .actions.mb-4
          = link_to "Edit Application", edit_patent_application_path(@patent_application), class: "btn btn-primary"
          = link_to "New Application", create_stub_patent_applications_path, class: "btn btn-outline-secondary"
          - logger.debug "[Route Debug] Updated show page 'New Application' button to use create_stub_patent_applications_path"
    
    .col-md-5
      / AI Chat interface - same as in new/edit views
      .chat-container
        h2 AI Assistant
        
        / Chat messages will be displayed here
        #chat_messages.chat-messages
          / Display existing chat history
          - if @patent_application.chat_history.present?
            / Track seen message contents to avoid duplicates
            - seen_contents = {}
            
            / Filter out duplicate messages
            - unique_messages = @patent_application.chat_history.reject do |msg|
              / Get role and content
              - role = msg[:role] || msg['role']
              - content = msg[:content] || msg['content'] || ""
              
              / Only skip system messages that are not acceptance messages
              - if role == 'system'
                - is_acceptance = content.to_s.start_with?("Problem statement accepted") || content.to_s.start_with?("Title accepted")
                - next true unless is_acceptance # Skip non-acceptance system messages
              
              / Get content based on the message format
              - if role == 'assistant'
                - content_hash = msg[:content] || msg['content'] || {}
                - content_hash = content_hash.is_a?(Hash) ? content_hash : {}
                - message_text = content_hash[:message] || content_hash['message'] || ""
                - content_key = "assistant:#{message_text}"
              - elsif role == 'system'
                - message_text = msg[:content] || msg['content'] || ""
                - content_key = "system:#{message_text}"
              - else
                - message_text = msg[:message] || msg['message'] || msg[:content] || msg['content'] || ""
                - content_key = "#{role}:#{message_text}"
              
              - next true if message_text.blank? # Skip empty messages
              - is_duplicate = seen_contents[content_key]
              - seen_contents[content_key] = true
              - is_duplicate
            
            / Render each unique message
            - unique_messages.each do |message|
              = render "message", message: message
          - else
            / Initial welcome message if no history
            .message.ai-message
              p Hello! I'm your AI assistant. I can help you refine your patent application's problem and solution statements. What would you like to discuss?
        
        / Chat form
        #chat_form.chat-form
          = render "chat_form", patent_application: @patent_application
        
        / AI suggestions panel
        #ai_suggestions.ai-suggestions
          = render "ai_suggestions", 
                   patent_application: @patent_application,
                   suggested_problem: nil,
                   suggested_solution: nil
  
  / Debug info - only shown in development
  - if Rails.env.development?
    .debug-info.mt-5
      h3 Debug Information
      pre = @patent_application.inspect
      
      - if @patent_application.chat_history.present?
        h4 Chat History (#{@patent_application.chat_history.size} messages)
        pre = JSON.pretty_generate(@patent_application.chat_history)
